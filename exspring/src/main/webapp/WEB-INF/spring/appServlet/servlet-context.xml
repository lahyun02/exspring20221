<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 애노테이션을 이용하여 Spring 웹 애플리케이션을 구현할 때 필요한 객체들을 자동 등록. Enables the Spring MVC @Controller programming model -->
	<!-- 애노테이션을 인식해서 객체를 자동으로 등록시킨다. -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 스프링이 그림파일을 찾아서 주도록 설정하는 것. 서블릿이 *.do로 요청처리하도록 설정했어서 필요없기때문에 주석 -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->

	<!-- 핸들러(컨트롤러)가 뷰이름을 반환한 경우, 
	뷰이름의 앞에 "/WEB-INF/views/"를 붙이고, 뒤에 ".jsp"를 붙여서 그 경로의 파일로 이동(forward)하도록 설정. 
	Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 뷰이름(문자열)이 프로젝트 안에 존재하는 리소스구나 생각하고 뷰 객체를 만들어서 스프링을 줌. 앞뒤에 경로명과 확장자를 붙여서 준다. -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- com.exam.exspring 패키지 아래에서 @Component, @Controller, @Service, @Repository 등의 
	애노테이션이 적용된 클래스들의 객체를 생성하여 스프링(자동컨테이너)에 자동 등록.
	이 패키지에 등록된 애노테이션을 싹 다 조사해서 객체 생성 후 스프링에 등록. 
	이런 걸 이용해서 스프링이 요청처리를 한다..!-->
	<context:component-scan base-package="com.exam.exspring" />
	
	<!-- 데이터베이스 연결을 관리하는 커넥션풀로서 DBCP를 등록 -->
	<!-- DB연결을 위해 DB 정보를 알려줌. -->
	<beans:bean id="ds" class="org.apache.commons.dbcp2.BasicDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" /> <!-- 내용이 없으므로 종료태그랑 합쳤음. -->
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<beans:property name="username" value="web" />
		<beans:property name="password" value="web01" />
	</beans:bean>
	
	<!-- namespace에서 설정을 안해줬기때문에 bean 태그 그대로 가져오면 오류가 뜸. beans: 를 붙여준다. -->
	<!-- MyBatis 본체를 등록 (커넥션을 제공하는 객체와 설정파일 위치를 설정 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <beans:property name="dataSource" ref="ds" />		<!-- 커넥션을 위해 db 정보를 알려줌 -->
	  <beans:property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" /> 
	  <!-- 설정파일 위치->경로를 알려줌. /exspring/src/main/resources -> 클래스패스 -->
	</beans:bean>
	
	<!-- SqlSessionTemplate : SqlSession(인터페이스)구현체로서, 스레드에 안전하고, 스프링트랜잭션에 따라서 커밋/롤백을 수행하고,
	마이바티스 예외를 스프링 예외로 변환 -->
	<!-- <beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		new SqlSessionTemplate(sqlSessionFactory) 할때 
		생성자의 첫번째 인자로 "sqlSessionFactory"라는 이름으로 스프링에 등록된 객체를 전달 (ref: 스프링에 등록되어 있는 객체를 가리킨다)
		<beans:constructor-arg index="0" ref="sqlSessionFactory" /> 
	</beans:bean> -->
	
	<!-- com.exam.exspring.member 패키지 아래에 존재하는 @Mapper 애노테이션이 적용된 인터페이스를 찾아서, 
	마이바티스를 실행하는 그 인터페이스의 구현체를 자동 생성하여 스프링에 등록  -->
	<mybatis-spring:scan base-package="com.exam.exspring.member" annotation="org.apache.ibatis.annotations.Mapper" />
	
	
</beans:beans>

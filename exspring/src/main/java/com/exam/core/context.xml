<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- 스프링 설정 파일 -->
	
	<!-- 자바 객체를 빈으로 부름. 자바 빈이라는 규약. 규칙이 많으나 현재는 대부분 무의미. getset등의 접근을 제공하는 등의 규약만 남아있음.-->
	
	<!-- com.exam.core.MyApp 객체(인스턴스)를 생성(new)하여 ma라는 이름으로 스프링에 등록 -->
	<!-- 이름은 id 또는 name 속성을 사용하여 지정. id->하나만. name-> 별명같이 여러개 가능. 공통점 : 이름이 서로 겹치면 안됨 -->
	<!--<bean id="ma" class="com.exam.core.MyApp" >-->
		<!-- 이 객체의 myService 속성(필드)에 스프링에 mse라는 이름으로 등록된 객체를 주입(저장) -->
		<!--<property name="myService" ref="msk"></property>-->
		<!-- value속성: 문자열 mse를 myService에 넣어라 -->
		<!-- ref속성: 밑에 설정한 mse를 myService에 넣어라 -->
	<!--</bean>-->
	<!--<bean id="mse" class="com.exam.core.MyServiceEn" ></bean>
	<bean id="msk" class="com.exam.core.MyServiceKo" ></bean>-->
	
	<!-- com.exam.core 패키지 아래에 존재하는 클래스들 중
	@Component(특별한 역할x, 스프링에 포함된다는 뜻), 
	(특별한 역할, Component를 포함=>)@Controller, @Service, @Repository, @Named 등의 애노테이션이 적용된 클래스들의 
	객체를 생성하여 스프링에 등록 -->
	<context:component-scan base-package="com.exam.core"></context:component-scan>
	
	<!-- 끼워넣을 코드를 담고 있는 MyAdvice 객체를 스프링에 등록  -->
	<bean id="adv" class="com.exam.core.MyAdvice"></bean>
	
	<aop:config>
		<!-- 여러번 사용하는 포인트컷은 이름을 붙여 등록시켜서 사용 가능 -->
		<!-- <aop:pointcut expression="execution(* com.exam.core.MyService.*(..))" id="pc" /> -->
		<!-- <aop:pointcut expression="execution(* com.exam.core.MyService.getH*(..))" id="pc" /> --> <!-- H로 시작하는 메소드에 끼어들어감. -->
		<aop:pointcut expression="execution(* com.exam.core.*.*(..))" id="pc" />  <!-- 모든 객체의 모든 메소드에 끼어들어감. -->
		
		<!-- aspect : 어떤 코드(Advice)를 어느 지점(pointcut)에 끼워넣을 것인지를 설정  -->
		<aop:aspect ref="adv">
			<!-- adv 객체의 bm 메서드를 MyService 객체의 모든 메서드 실행 전에 끼워넣어서 실행  -->
			<!-- <aop:before method="bm" pointcut-ref="pc" />  -->
			<!-- *:모든 객체 반환 *(..): MyService의 모든 메서드  -->
			<!-- adv 객체의 am 메서드를 MyService 객체의 모든 메서드 실행 후에 끼워넣어서 실행  -->
			<!-- <aop:after method="am" pointcut-ref="pc" />  -->
			<aop:around method="rm" pointcut-ref="pc"/>
		</aop:aspect>
	</aop:config>
	
		
</beans>
